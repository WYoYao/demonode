var connect = function () {
    this.connStr = require('./config').db;
    this.mysql = require('./mysql');
    this.createPool();
};

/*创建连接池*/
connect.prototype.createPool = function (connStr) {
    connStr = connStr || this.connStr;
    this.pool = this.mysql.createPool(connStr);   //连接池
};

/*停止连接池*/
connect.prototype.poolEnd = function (call) {
    this.pool.end(function (err) {
        if (!err) console.log('连接池被停止');
        call(err);
    });
};

/*语句查询 返回行数组*/
connect.prototype.query = function (sqlStr, call) {
    this.pool.getConnection(function (connErr, connection) {
        if (connErr) return call(connErr);
        connection.query(sqlStr, function (sqlErr, rows) {
            connection.release();
            call(sqlErr, rows);
        });
    });
};

/*sql语句增、删、改 只要sqlErr没有值即成功*/
connect.prototype.update = function (sqlStr, call) {
    this.pool.getConnection(function (connErr, connection) {
        if (connErr) return call(connErr);
        connection.query(sqlStr, function (sqlErr, rows) {
            connection.release();
            !sqlErr && rows.affectedRows < 1 ? pLogger.warn('未带来改变的sql语句：' + sqlStr) : null;
            call(sqlErr, rows);
        });
    });
};

/*操作类存储过程调用 返回行数组*/
connect.prototype.procedureUpdate = function (procStr, call) {
    this.pool.getConnection(function (connErr, connection) {
        if (connErr) return call(connErr);
        connection.query(procStr, function (procErr, rows) {
            connection.release();
            if (!procErr) {
                var columnObj = rows[0][0];
                var protos = Object.keys(columnObj);
                if (columnObj[protos[0]] > 0)
                    procErr = '存储过程执行错误';
            }
            call(procErr, !procErr ? rows[0] : []);
        });
    });
};

/*查询类存储过程调用 返回的是二维数组*/
connect.prototype.procedureQuery = function (procStr, call) {
    this.pool.getConnection(function (connErr, connection) {
        if (connErr) return call(connErr);
        connection.query(procStr, function (procErr, rows) {
            connection.release();
            var result = (!procErr ? rows : []) || [];
            result.splice(result.length - 1, 1);
            call(procErr, result);
        });
    });
};

/*查询类存储过程调用 返回的是一维数组，即行数组*/
connect.prototype.procedureQuerySingle = function (procStr, call) {
    this.pool.getConnection(function (connErr, connection) {
        if (connErr) return call(connErr);
        connection.query(procStr, function (procErr, rows) {
            connection.release();
            var result = (!procErr ? rows : []) || [];
            call(procErr, result[0] || []);
        });
    });
};

module.exports = new connect();