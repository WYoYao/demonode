/*数据库及表的操作*/
var dataBase = function() {
    this.baseNamePrefix = 'persagy_webdemo_';
    this.connect = require('../connect/connect');
    this.tool = require('./tool');
    this.path = require('path');
    this.fs = require('fs');
    this.dataBaseName = this.baseNamePrefix + this.path.basename(baseDirname);
    this.dataBaseName = this.tool.mySqlNameReplace(this.dataBaseName);
};

//初始化
dataBase.prototype.init = function() {
    this.initDataBase();
};

//创建以项目名称命名的数据库
dataBase.prototype.initDataBase = function() {
    var _this = this;
    var dataBaseSql = createSql.createDataBaseSql(_this.dataBaseName);
    _this.connect.update(dataBaseSql, function(err) {
        if (err) return pLogger.error('创建数据库错误：' + (JSON.stringify(err)));
        _this.initTable();
    });
};

//创建数据表及列
dataBase.prototype.initTable = function() {
    var dataMapObj = _mapConfig;
    for (var urlPath in dataMapObj) {
        if (!dataMapObj.hasOwnProperty(urlPath)) continue;
        var curNode = dataMapObj[urlPath];
        createTable.call(this, urlPath, curNode.proArr || dataMapObj[curNode.proArrBy] || []);
    }

    function createTable(tableName, columnArr) {
        var _this = this;
        if (columnArr.length == 0) return false;
        tableName = this.tool.mySqlNameReplace(tableName);
        var tableSql = createSql.createTableSql(_this.dataBaseName, tableName);
        _this.connect.update(tableSql, function(tableErr) {
            if (tableErr) return pLogger.error('创建表' + tableName + '错误：' + (JSON.stringify(tableErr)));
            var dataTypeObj = pconst.mapDataType;
            for (var i = columnArr.length - 1; i >= 0; i--) {
                var currColumn = columnArr[i];
                if (!currColumn.type || !currColumn.name) continue;
                switch (currColumn.type) {
                    case dataTypeObj.object.name:
                    case dataTypeObj.array.name:
                    case dataTypeObj.tree.name:
                        var newTableName = _this.tool.createTableName(tableName, currColumn.name);
                        var childTableColumnArr = currColumn.proArr || dataMapObj[currColumn.proArrBy] || [];
                        //子表列内加上和主表的关系列
                        childTableColumnArr.push({
                            name: _this.tool.createChildTableForeignColumnName(tableName),
                            type: dataTypeObj.number.name
                        });
                        createTable.call(_this, newTableName, childTableColumnArr);
                        break;
                    default:
                        updateColumn.call(_this, tableName, currColumn.name, dataTypeObj[currColumn.type].sqlType, currColumn.note || '');
                        break;
                }
            }
        });
    };

    function updateColumn(tableName, columnName, typename, commentName) {
        var columnSql = createSql.updateColumnSql(this.dataBaseName, tableName, columnName, typename, commentName);
        this.connect.procedureUpdate(columnSql, function(columnErr) {
            if (columnErr) {
                pLogger.error('StartStartStartStartStartStartStartStartStartStartStartStartStartStartStartStartStartStartStartStart');
                pLogger.error(columnSql);
                pLogger.error('EndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd');
            }
            if (columnErr) return pLogger.error('更新表' + tableName + '的列' + columnName + '错误：' + (JSON.stringify(columnErr)));
        });
    };
};

module.exports = new dataBase();


var createSql = {
    tool: require('./tool'),
    createDataBaseSql: function(dataBaseName) {
        return 'CREATE DATABASE IF NOT EXISTS ' + dataBaseName + ' DEFAULT CHARSET utf8 COLLATE utf8_general_ci;';
    },
    createTableSql: function(dataBaseName, tableName) {
        return "CREATE TABLE IF NOT EXISTS " + dataBaseName + "." + tableName + " (" + this.tool.primaryKeyColumn +
            " int NOT NULL AUTO_INCREMENT COMMENT '标识'," + this.tool.parentIdColumn + " int DEFAULT NULL COMMENT '父级id'," +
            "PRIMARY KEY (" + this.tool.primaryKeyColumn + ")) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;";
    },
    updateColumnSql: function(dataBaseName, tableName, columnName, typename, commentName) {
        return 'call persagy_webdemo.proc_updatecolumn("' + dataBaseName + '","' + tableName + '","' + columnName + '","' +
            typename + '","' + commentName + '")';
    }
};