var data = function() {
    this.dataBaseName = require('./dataBase').dataBaseName;
    this.path = require('path');
    this.fs = require('fs');
    this.tool = require('./tool');
    this.responseTool = require('../common/responseTool');
};

//登录
data.prototype.plogin = function(req, res, next) {
    var _this = this;
    getData.call(_this, 'user', function(err, result) {
        var obj = {
            isLogin: err ? false : true,
            err: err,
            puser: result || {},
            loginFailedType: 1
        };
        _this.responseTool.loginResponse(req, res, obj);
    });
};

//获取数据
data.prototype.pquery = function(req, res, next, requestType, objParam) {
    var _this = this;
    var fn = objParam.fn;
    var root = _mapConfig[fn];
    if (!root)
        return _this.responseTool.sendServerException(res, '请检查' + pconst.mapFileName + '文件是否有' + fn + '请求的配置');
    getData.call(_this, fn, function(err, result) {
        if (err) {
            console.error('获取' + fn + '的数据err：' + (err.stack || JSON.stringify(err)));
            return _this.responseTool.sendServerException(res);
        }
        _this.responseTool.sendSuccess(res, result);
    });
};

//普通下载
data.prototype.pfiledownload = function(req, res) {
    this.responseTool.sendSuccess(res, { content: '下载成功' });
};

//根据不同参数来进行附件下载
data.prototype.pdownloadByParam = function(req, res) {
    this.pfiledownload(req, res);
};

//数据更新
data.prototype.pupdate = function(req, res) {
    this.responseTool.sendSuccess(res);
};





function getData(fn, call) {
    var _this = this;
    var dataTypeObj = pconst.mapDataType;
    var rootPro = _mapConfig[fn] || {};
    var rootProArr = rootPro.proArr || _mapConfig[rootPro.proArrBy] || [];
    var firstTabName = this.tool.mySqlNameReplace(fn);
    var tableNameArr = [firstTabName];
    joinTableName(rootProArr, fn);
    queryData.select(_this.dataBaseName, tableNameArr, function(err, result) {
        if (err) return call('获取' + fn + '的demo数据错误：' + (JSON.stringify(err)));
        result = result || [];
        var resultObj = {};
        for (var j = 0; j < tableNameArr.length; j++) {
            resultObj[tableNameArr[j]] = result[j] || [];
        }

        var sendResult = _this.tool.parseResult(null, fn, resultObj);
        call(null, sendResult);
    });

    //拼接需要查询的表名
    function joinTableName(proArr, prevNodeName) {
        for (var i = 0; i < proArr.length; i++) {
            var currPro = proArr[i];
            if (currPro.type == dataTypeObj.object.name || currPro.type == dataTypeObj.array.name || currPro.type == dataTypeObj.tree.name) {
                var newTableName = _this.tool.createTableName(prevNodeName, currPro.name);
                newTableName = _this.tool.mySqlNameReplace(newTableName);
                tableNameArr.push(newTableName);
                arguments.callee(currPro.proArr || _mapConfig[currPro.proArrBy] || [], newTableName);
            }
        }
    };
};

module.exports = new data();

var queryData = {
    connect: require('../connect/connect'),
    select: function(dataBaseName, tableNameArr, call) {
        var tableStr = tableNameArr.join(',') + ',';
        var sql = 'call persagy_webdemo.proc_multitableselect("' + dataBaseName + '","' + tableStr + '");'
        this.connect.procedureQuery(sql, call);
    }
};