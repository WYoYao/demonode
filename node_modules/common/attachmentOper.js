var attachmentOper = function () {
    this.fs = require('fs');
    this.path = require('path');
    this.rc = require('./restClient');
    this.uploadPath = '';
    this.tempDirName = '_tempfile';     //文件上传的临时目录
    this.staticDirName = 'public';      //静态资源根目录
    this.viewDirName = 'views';         //视图文件夹名称
};

/*文件上传 参数为object,提供属性如下：
* call 上传成功后的回调函数(非必须),
        带两个参数:err、result。result是数组，和files的顺序一致，
        每项属性如下：resource 文件标识
* files object或数组类型,提供属性如下：
*   path            本地文件路径（必须）
*   subdirectory   子目录(必须)
*   fileName           文件名称(非必须)
*   fileSuffix         文件后缀(非必须)
*   isShowPath         是否是客户端显示路径(即临时上传成功后返回的路径)，默认false，为true时，将把path转成绝对路径
*/
attachmentOper.prototype.upload = function (objParam) {
    
    var _files = objParam.files;
    if (_files instanceof Array == false) _files = [_files];
    for (var i = 0; i < _files.length; i++) {
        var curr = _files[i];
        if (!curr.path) return executeCall('上传时缺少文件路径');
        if (curr.isShowPath === true) {
            var tempName = this.path.basename(curr.path);
            curr.path = this.path.join(this.uploadPath, tempName);
        }
        if (this.fs.existsSync(curr.path) == false) return executeCall(curr.path + '文件丢失');
        if (!curr.subdirectory) return executeCall('请传入' + curr.path + '的目录');
    }

    this.rc.upload({
        call: executeCall,
        files: _files
    });

    function executeCall(err, result) {
        if (typeof objParam.call == 'function') objParam.call(err, result);
    };
};

//定时清理本地服务器上的无用附件
attachmentOper.prototype.clearFile = function () {
    var self = this;
    setTimeout(function () {
        var currHour = new Date().getHours();
        var isExists = self.fs.existsSync(self.uploadPath);
        if (currHour === 0 && isExists === true) {
            var filesArr = self.fs.readdirSync(self.uploadPath);
            for (var i = 0; i < filesArr.length; i++) {
                var currPath = self.uploadPath + '/' + filesArr[i];
                var stat = self.fs.lstatSync(currPath);
                if (stat.isFile() === true)
                    self.fs.unlinkSync(currPath);
            }
        }
        self.clearFile();
    }, 1000 * 60 * 60);
};

/*判断附件文件夹是否存在,参数为object,提供属性如下：
*dirPath 附件文件夹路径,默认 this.uploadPath
*level 检查几级,默认2
*isCreate 不存在时 是否创建 默认true
*/
attachmentOper.prototype.existsDir = function () {
    try {
        var arguObj = arguments[0] || {};
        dirPath = arguObj.dirPath || this.uploadPath;
        level = arguObj.level || 2;
        isCreate = arguObj.isCreate || true;
        for (var i = level - 1; i >= 0; i--) {
            var levelStr = '';
            for (var j = 0; j < i; j++) { 
                levelStr += '../';
            }
            var newDir = this.path.resolve(dirPath, levelStr);
            if (this.fs.existsSync(newDir) === false && isCreate === true)
                this.fs.mkdirSync(newDir);
        }
    } catch (e) {
        console.log(e.stack || e);
    }
};

module.exports = new attachmentOper();