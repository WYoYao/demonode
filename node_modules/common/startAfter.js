function startAfterExecute(app, isLogin, routes) {
    var path = require('path');
    var rc = require('./restClient');
    var extendDirName = path.join(commonLibUrl, 'scripts/extend');
    var toolDirName = path.join(commonLibUrl, 'scripts/tool');

    var extendNameArr = ['Date', 'Math','String'];
    for (var i = 0; i < extendNameArr.length; i++) {
        
        (function(extendName) {
            rc.sendGet({
                url: parserUrl(path.join(extendDirName, extendName + '.js')),
                isParserResult: false,
                isToDataMap: false,
                isParserCriteria: false,
                call: function(err, result) {

                    if (err) return console.error('加载' + extendName + '错误：' + (err.stack || JSON.stringify(err)));
                    //20170814 leo 远程服务器端加载的数据绑定到全局系统变量中
                    eval(result);

                    global[extendName] = eval(extendName);
                }
            });
        })(extendNameArr[i]);
    }

    var toolNameArr = ['pconst', 'psecret', 'ptool'];
    var count = 0;
    for (i = 0; i < toolNameArr.length; i++) {
        (function(toolName) {
            rc.sendGet({
                url: parserUrl(path.join(toolDirName, toolName + '.js')),
                isParserResult: false,
                isToDataMap: false,
                isParserCriteria: false,
                call: function(err, result) {
                    ++count;
                    if (err) return console.error('加载' + toolName + '错误：' + (err.stack || JSON.stringify(err)));
                    eval(result);
                    global[toolName] = eval(toolName);
                }
            });
        })(toolNameArr[i]);
    }

    function parserUrl(url) {
        return url.replace(/http:\//g, 'http://').replace(/http:\\/g, 'http://').replace(/\\/g, '/');
    };

    var timeInterval = setInterval(function() {
        if (count !== toolNameArr.length) return;
        clearInterval(timeInterval);
        require('./publicRouter')(app, isLogin);
        if (routes) {
            if (routes instanceof Array) {//具有多个路由文件,以数组的形式传入
                for (var i = 0; i < routes.length; i++) {
                    routes[i](app);
                }
            } else {//只有一个路由文件
                routes(app);
            }
        }
		if (_config.isInitBase == true) {
			var dataBase = require('../demoData/dataBase');
			dataBase.init();
		}
    }, 100);
};

module.exports = startAfterExecute;